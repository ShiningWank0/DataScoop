name: Release

on:
  workflow_run:
    workflows: ["Tests"]
    types:
      - completed

jobs:
  release:
    # テストワークフローが成功した場合のみ実行
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    # リリース情報アーティファクトをダウンロード
    - name: Download artifact
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: ${{github.event.workflow_run.id }}
          });
          const releaseInfoArtifact = artifacts.data.artifacts.find(artifact => artifact.name === "release-info");
          if (!releaseInfoArtifact) {
            console.log('No release info artifact found. Skipping release.');
            process.exit(1);
          }
          const download = await github.rest.actions.downloadArtifact({
            owner: context.repo.owner,
            repo: context.repo.repo,
            artifact_id: releaseInfoArtifact.id,
            archive_format: 'zip'
          });
          const fs = require('fs');
          fs.writeFileSync('release-info.zip', Buffer.from(download.data));
          
    - name: Unzip artifact
      run: |
        unzip release-info.zip
        cat release_info.txt
        source release_info.txt
        echo "TAG=$TAG" >> $GITHUB_ENV
        
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.TAG }}
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine toml
        pip install -r requirements-dev.txt
        
    - name: Extract version from tag
      id: get_version
      run: |
        # TAGはenv変数から取得
        echo "version=${TAG#v}" >> $GITHUB_OUTPUT
      
    - name: Verify version in pyproject.toml
      run: |
        package_version=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        tag_version=${{ steps.get_version.outputs.version }}
        if [ "$package_version" != "$tag_version" ]; then
          echo "::error::Version mismatch: Tag is v$tag_version but pyproject.toml version is $package_version"
          exit 1
        fi
        
    - name: Build package
      run: |
        python -m build
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          # DataScoop ${{ steps.get_version.outputs.version }}
          
          ## Changes
          
          <!-- Release notes go here -->
          
        files: |
          dist/*
